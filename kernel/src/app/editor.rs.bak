use crate::fs::{fat12::Fs, block::Floppy};
use crate::init::config::PATH_CLUSTER;
use crate::input::keyboard::{self, keyboard_read_scancode};
use crate::vga::{buffer::Color, screen::clear, write::{string, newline}, writer::Writer};

pub const MAX_LINES: usize = 100;
pub const MAX_LINE_LEN: usize = 80;

pub struct Editor {
    pub buffer: [[u8; MAX_LINE_LEN]; MAX_LINES],
    pub line_count: usize,
    pub cursor_x: usize,
    pub cursor_y: usize,
}

impl Editor {
    pub fn new() -> Self {
        Self {
            buffer: [[b' '; MAX_LINE_LEN]; MAX_LINES],
            line_count: 0,
            cursor_x: 0,
            cursor_y: 0,
        }
    }

    pub fn load(&mut self, data: &[u8]) {
        let mut line = 0;
        let mut col = 0;

        for &byte in data {
            match byte {
                b'\n' | b'\r' => {
                    line += 1;
                    col = 0;
                    if line >= MAX_LINES {
                        break;
                    }
                }
                _ => {
                    if col < MAX_LINE_LEN && line < MAX_LINES {
                        self.buffer[line][col] = byte;
                        col += 1;
                    }
                }
            }
        }

        self.line_count = line + 1;
    }

    pub fn save(&self, out: &mut [u8]) -> usize {
        let mut idx = 0;

        if self.line_count > MAX_LINES {
            return 0;
        }

        for y in 0..self.line_count {
            for x in 0..MAX_LINE_LEN {
                let c = self.buffer[y][x];
                if c == b' ' {
                    continue;
                }
                if idx < out.len() {

                    if let Some(o) = out.get_mut(idx) {
                        *o = c;
                    }

                    //out[idx] = c;
                    idx += 1;
                }
            }
            if idx + 1 < out.len() {

                if let Some(o) = out.get_mut(idx) {
                    *o = b'\n';
                }

                //out[idx] = b'\n';
                idx += 1;
            }
        }

        idx
    }

    pub fn render(&self, writer: &mut Writer) {
        for y in 0..self.line_count {
            for x in 0..MAX_LINE_LEN {
                if let Some(rw) = self.buffer.get(y) {
                    if let Some(cl) = rw.get(x) {
                        writer.write_byte(*cl);
                    }
                }
            }
            writer.write_byte(b'\n');
        }
    }

    pub fn handle_key(&mut self, key: u8) {
        match key {
            b'\n' => {
                if self.cursor_y + 1 < MAX_LINES {
                    self.cursor_y += 1;
                    self.cursor_x = 0;
                    if self.cursor_y >= self.line_count {
                        self.line_count = self.cursor_y + 1;
                    }
                }
            }
            8 => { // Backspace
                if self.cursor_y < self.buffer.len() && self.cursor_x > 0 {
                    self.cursor_x -= 1;
                    if let Some(line) = self.buffer.get_mut(self.cursor_y) {
                        if let Some(cell) = line.get_mut(self.cursor_x) {
                            *cell = b' ';
                        }
                    }
                }
            }
            b => {
                if self.cursor_y < self.buffer.len() && self.cursor_x < MAX_LINE_LEN {
                    if let Some(line) = self.buffer.get_mut(self.cursor_y) {
                        if let Some(cell) = line.get_mut(self.cursor_x) {
                            *cell = b;
                            self.cursor_y += 1;
                        }
                    }
                }
            }
        }
    }

}

pub fn edit_file(file_name: &[u8; 11], vga_index: &mut isize) {
    let floppy = Floppy;

    match Fs::new(&floppy, vga_index) {
        Err(e) => {
            string(vga_index, e.as_bytes(), Color::Red);
            newline(vga_index);
            return;
        }
        Ok(fs) => {
            let mut wr = Writer::new();

            let mut file_buf = [0u8; 512];

            unsafe {
                let cluster = fs.list_dir(PATH_CLUSTER, file_name, vga_index);

                if cluster <= 0 {
                    return;
                }

                fs.read_file(cluster as u16, &mut file_buf, vga_index);
            }

            let mut editor = Editor::new();

            if let Some(slice) = file_buf.get_mut(..) {
                editor.load(&slice);
            }

            loop {
                clear(vga_index);
                editor.render(&mut wr);
                keyboard::move_cursor(editor.cursor_x as u16, editor.cursor_y as u16);

                let key = keyboard_read_scancode();

                if key & 0x80 != 0 {
                    continue;
                }

                match key {
                    0x01 => break,
                    0x11 => break, // Ctrl+Q
                    0x13 => {
                        let mut save_buf = [0u8; 4096];
                        let len = editor.save(&mut save_buf);

                        unsafe {
                            if let Some(slice) = save_buf.get(..len) {
                                fs.write_file(PATH_CLUSTER, file_name, slice, vga_index);
                            }

                        }
                    }
                    byte => {
                        editor.handle_key(byte);
                    }
                }
            }
        }
    }
}
